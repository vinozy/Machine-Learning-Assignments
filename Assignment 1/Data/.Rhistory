A<-c(rep("1", 10), rep("2", 10))
B<-rep(c(c(rep("1", 5), rep("2", 5))), 2)
resp<-c(12.9, 11.3, 11.7, 12.1, 12.3,
13.7, 12.8, 13.6, 13.1, 13.5,
14.2, 14.5, 13.9, 13.6, 14.4,
13.5, 13.1, 13.3, 13.1, 13.4)
df<-data.frame(A=A, B=B, resp=resp)
####
####
#### (b) - residual analysis
####
####
## untransformed data
##
##  - constant variance looks ok
##  - normality looks great
fit=aov(resp~A+B+A:B)
par(mfrow=c(2,2))
plot(fit)
## untransformed data
##
##  - constant variance looks ok
##  - normality looks great
fit<-aov(resp~A+B+A:B,data=df)
par(mfrow=c(2,2))
plot(fit)
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep(1,10),rep(2,10),rep(3,10))
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
##make a table that shows the random treatment assignment
CRD.table=data.frame(Exp.Unit,treatment,row.names = NULL)
CRD.table
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep(1,10),rep(2,10),rep(3,10))
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6)
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
##make a table that shows the random treatment assignment
CRD.table=data.frame(Exp.Unit,treatment,row.names = NULL)
CRD.table
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6)
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
##make a table that shows the random treatment assignment
CRD.table=data.frame(Exp.Unit,treatment,row.names = NULL)
CRD.table
## Make an unsorted list of the treatment labels, one for each experimental unit
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
## Make an unsorted list of the treatment labels, one for each experimental unit
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6)
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
CRD.table
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6)
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6)
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
treatments.not.random=c(rep("C",6),rep("R",6)
treatments.not.random=c(rep("C",6),rep("R",6)
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6))
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
CRD.table=data.frame(Exp.Unit,treatment,row.names = NULL)
CRD.table
> Temperature<-c(rep("C", 6), rep("R", 6))
Temperature<-c(rep("C", 6), rep("R", 6))
Diameters<-c(59,63,64,60,65,68,57,55,56,58,59,59)
data<-data.frame(Temperature=as.factor(Temperature), Diameters=Diameters)
data
fit1<-aov(Diameters~Temperature, data=data)
par(mfrow=c(2,2))
plot(fit3)
plot(fit1)
anova(fit1)
warnings()
anova(fit1)
library(lsmeans)
install.packages("emmeans")
install.packages("emmeans")
library(emmeans)
lsmTemperature=lsmeans(fit1, ~ Temperature)
summary(contrast(lsmdata, method="pairwise", adjust="tukey"),
infer=c(T,T), level=0.95, side="two-sided")
summary(contrast(lsmTemperature, method="pairwise", adjust="tukey"),
infer=c(T,T), level=0.95, side="two-sided")
install.packages("emmeans")
library(lsmeans)
lsmTemperature=lsmeans(fit1, ~ Temperature)
summary(contrast(lsmTemperature, method="pairwise", adjust="tukey"),
infer=c(T,T), level=0.95, side="two-sided")
install.packages("emmeans")
vignettes ar
library(lsmeans)
lsmTemperature=lsmeans(fit1, ~ Temperature)
summary(contrast(lsmTemperature, method="pairwise", adjust="tukey"),
infer=c(T,T), level=0.95, side="two-sided")
library(lsmeans)
lsmTemperature=lsmeans(fit1, ~ Temperature)
summary(contrast(lsmTemperature, method="pairwise", adjust="tukey"),
infer=c(T,T), level=0.95, side="two-sided")
## Make an unsorted list of the treatment labels, one for each experimental unit
treatments.not.random=c(rep("C",6),rep("R",6))
## Randomly re-order the treatments
treatment=sample(treatments.not.random)
##match this order to the list of experimental units
n=length(treatment)
Exp.Unit=1:n
CRD.table=data.frame(Exp.Unit,treatment,row.names = NULL)
CRD.table
x=c(-1,0,1)
y=c(0,4,2)
lm(y~x)
data = read.table("record.txt",sep="")
head(data)
plot(data)
cor(data)
y=data$m400
x=data$m100
X=cbind(rep(1,55),x)
X
beta=solve(t(X) %*% X) %*% t(X) %*% y
beta
plot(x,y)
abline(beta[1],beta[2],col="red")
lm_fit=lm(y~x)
summary(lm_fit)
beta0=beta[1]
beta1=beta[2]
beta0
beta1
yfitted=beta0+beta1*x
yfitted
yresid=y-yfitted
yresid
xquan=quantile(x,c(0.25,0.75))
xquan
beta0+beta1*xquan
diamond=read.csv("DiamondRings.csv")
head(diamond)
#Part 3
install.packages("faraway")
library(faraway)
data(teengamb)
head(teengamb)
dim(teengamb)
teengamb$income
attach(teengamb)
income
lm_fit2=lm(gamble~sex+status+income+verbal)
summary(lm_fit2)
gamble_resid=residuals(lm_fit2)
gamble_resid
gamble_fitted=fitted.values(lm_fit2)
gamble_fitted
cor(gamble_resid,gamble_fitted)
which.max(gamble_resid)
cor(gamble_fitted,income)
summary(lm_fit2)
?teengamb
detach(teengamb)
?attach
library(faraway)
data("cheddar")
attach(cheddar)
head(cheddar)
dim(cheddar)
#1
plot(cheddar)
#2
lm_cheddar=lm(taste~Acetic+H2S+Lactic)
summary(lm_cheddar)
#3 interpretation
#4
X.deisgn=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
#3 interpretation
#4
X.design=cbind(1,Acetic,H2S,Lactic)
library(faraway)
data("cheddar")
attach(cheddar)
head(cheddar)
dim(cheddar)
#2
lm_cheddar=lm(taste~Acetic+H2S+Lactic)
summary(lm_cheddar)
#3 interpretation
#4
X.design=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
X.design=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
X.design=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
library(faraway)
attach(cheddar)
head(cheddar)
plot(cheddar)
fit3=lm(taste~Acetic+H2S+Lactic)
summary(fit3)
X.design=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
library(faraway)
data("cheddar")
attach(cheddar)
head(cheddar)
dim(cheddar)
#1
plot(cheddar)
#2
lm_cheddar=lm(taste~Acetic+H2S+Lactic)
summary(lm_cheddar)
#3 interpretation
#4
X.design=cbind(1,Acetic,H2S,Lactic)
dim(X.deisgn)
beta_hat=solve(t(X.design)%*%X.design) %*% t(X.design) %*% taste
beta_hat
taste_fitted=X.design%*%beta_hat
RSS=sum((taste-taste_fitted)^2)
TSS=sum((taste-mean(taste))^2)
F_stat=((TSS-RSS)/(4-1))/(RSS/(30-4))
F_stat
p_value=1-pf(F_stat,df1=3,df2=26)
p_value
summary(lm_cheddar)
attach(cheddar)
library(faraway)
data("cheddar")
attach(cheddar)
library(faraway)
attach(teengamb)
fit=lm(sqrt(gamble)~income)
summary(fit)
fit$sigma^2
fit$coefficients
fit$sigma^2
setwd("~/Documents/Penn State/Spring 19/STAT 462/Week 7")
library(faraway)
data=(prostate)
head(prostate)
prostate1=prostate[-1,]
attach(prostate1)
fit1=lm(lpsa~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45)
summary(fit1)
fit2=lm(lpsa~lcavol+lweight+age+lbph+svi)
summary(fit2)
anova(fit1,fit2)
prostate2=prostate[1,-9]
predict(lm_model1,new=data.frame(t(unlist(c(1,prostate2)))),interval='confidence',level=0.95)
prostate2=prostate[1,-9]
predict(fit1,new=data.frame(t(unlist(c(1,prostate2)))),interval='confidence',level=0.95)
predict(fit2,new=data.frame(t(unlist(c(1,prostate2)))),interval='prediction',level=0.95)
(0.9859598-(-0.43078))^2
(1.00823-(-0.43078))^2
detach(prostate1)
cement=read.table("cement.txt",header = T)
attach(cement)
model1=lm(Hardness_cement~Aluminum)
summary(model1)
x0=quantile(Aluminum,probs=c(0.5,0.9))
x0
betahat=coef(model1)
betahat
y0=betahat[1]+x0*betahat[2]
y0
tmulti=qt(0.975,df=13-2)
sigma2=summary(model1)$sigma^2
X.design=cbind(1,Aluminum)
x0
x1=c(1,x0[1])
x2=c(1,x0[2])
CI1=c(y0[1]-tmulti*sqrt(sigma2*t(x1)%*%solve(t(X.design)%*%X.design)%*%x1),
y0[1]+tmulti*sqrt(sigma2*t(x1)%*%solve(t(X.design)%*%X.design)%*%x1))
CI1
CI2=c(y0[2]-tmulti*sqrt(sigma2*t(x2)%*%solve(t(X.design)%*%X.design)%*%x2),
y0[2]+tmulti*sqrt(sigma2*t(x2)%*%solve(t(X.design)%*%X.design)%*%x2))
CI2
width1=CI1[2]-CI1[1]
width1
width2=CI2[2]-CI2[1]
width2
PI1=c(y0[1]-tmulti*sqrt(sigma2*(1+t(x1))%*%solve(t(X.design)%*%X.design)%*%x1),
y0[1]+tmulti*sqrt(sigma2*(1+t(x1))%*%solve(t(X.design)%*%X.design)%*%x1))
PI1
PI2=c(y0[2]-tmulti*sqrt(sigma2*(1+t(x2))%*%solve(t(X.design)%*%X.design)%*%x2),
y0[2]+tmulti*sqrt(sigma2*(1+t(x2))%*%solve(t(X.design)%*%X.design)%*%x2))
PI2
pred.width1=PI1[2]-PI1[1]
pred.width1
pred.width2=PI2[2]-PI2[1]
pred.width2
model2=lm(Hardness_cement~.,data=cement)
summary(model2)
X=model.matrix(model2)
x0=apply(X,2,function(z) quantile(z,probs=c(0.5,0.75)))
x0
x0 %*% coef(model2)
CI3=predict(model2,new=data.frame(x0), interval='confidence',level=0.95)
CI3
width3=CI3[1,3]-CI3[1,2]
width4=CI3[2,3]-CI3[2,2]
width3
width4
PI3=predict(mode2,new=data.frame(x0), interval='prediction',level=0.95)
PI3=predict(model2,new=data.frame(x0), interval='prediction',level=0.95)
PI3
pred.width3=PI3[1,3]-PI3[1,2]
pred.width4=PI3[2,3]-PI3[2,2]
pred.width3
pred.width4
detach(cement)
data=(teengamb)
attach(teengamb)
head(teengamb)
data=(teengamb)
attach(teengamb)
head(teengamb)
lmfit1=lm(gamble~sex+status+income+verbal)
data=(teengamb)
attach(teengamb)
head(teengamb)
lmfit1=lm(gamble~sex+status+income+verbal)
summary(lmfit1)
data=(teengamb)
attach(teengamb)
head(teengamb)
lmfit1=lm(gamble~sex+status+income+verbal)
summary(lmfit1)
lmfit2=lm(gamble~income)
summary(lmfit2)
anova(lmfit1,lmfit2)
detach(teengamb)
setwd("~/Documents/Penn State/Spring 19/STAT 462/Week 7")
library(faraway)
data=(prostate)
head(prostate)
data=(teengamb)
attach(teengamb)
head(teengamb)
lmfit1=lm(gamble~sex+status+income+verbal)
summary(lmfit1)
average(teengamb)
pf(q=13.6, df1=3, df2=10, lower.tail=FALSE)
setwd("~/Documents/Penn State/Spring 19/STAT 462/Week 12")
library(faraway)
attach(divusa)
head(divusa)
div1=divusa[,-1]
cor(div1)
div1=divusa[,-2]
cor(div1)
library(faraway)
attach(divusa)
head(divusa)
div1=divusa[,-3]
cor(div1)
div1=divusa[,-1]
cor(div1)
div1=divusa[,-1]
div2=div1[,-1]
cor(div2)
R2=numeric(5)
VIF=numeric(5)
for (i in 1:5){
X=as.matrix(div2[,-i])
lmfit=lm(div2[,i]~X,div2)
sumfit=summary(lmfit)
R2[i]=sumfit$r.squared
VIF[i]=1/(1-R2[i])
}
R2;VIF
lm1=lm(divorce~.,divusa)
summary(lm1)
lm1=lm(divorce~.,div1)
summary(lm1)
lm2=lm(divorce~femlab+marriage+birth,div1)
summary(lm2)
vif(lm2)
cor(residuals(model1)[-1], residuals(model1)[-length(residuals(model1))])
cor(residuals(lm1)[-1], residuals(lm1)[-length(residuals(lm1))])
library(nlme)
library(nlme)
glmod=gls(divorce~unemployed+femlab+marriage+birth+military,correlation=corAR1(form=~1),method = "ML")
summary(glmod)
intervals(glmod, which = "var-cov")
detach(divusa)
greenhouse=read.table("greenhouse.txt",header=TRUE)
attach(greenhouse)
head(greenhouse)
mtd=factor(method,levels=c("bed","pot","hydroponic","aeroponic")) fit1=lm(weight~met)
mtd=factor(method,levels=c("bed","pot","hydroponic","aeroponic")) fit1=lm(weight~mtd)
mtd=factor(method,levels=c("bed","pot","hydroponic","aeroponic"))
fit1=lm(weight~mtd)
summary(fit1)
var=factor(variety,levels=c("Costanera","Mariva","Unica"))
fit2=lm(weight~mtd+var)
summary(fit2)
anova(fit1,fit2)
fit3=lm(weights~mtd+var+mtd:var)
fit3=lm(weight~mtd+var+mtd:var)
summary(fit3)
anova(fit2,fit3)
mean(-0.5,1.5,2.5,1.5,-0.5,1.5)
average(-0.5,1.5,2.5,1.5,-0.5,1.5)
mean(-0.5,1.5,2.5,1.5,-0.5,1.5)
sd(-0.5,1.5,2.5,1.5,-0.5,1.5)
summary(-0.5,1.5,2.5,1.5,-0.5,1.5)
-0.5,1.5,2.5,1.5,-0.5,1.5
summary(-0.5,1.5,1.5,2.5,-0.5,1.5)
-0.5,1.5,2.5,1.5,-0.5,1.5
summary([-0.5,1.5,2.5,1.5,-0.5,1.5])
-0.5,1.5,2.5,1.5,-0.5,1.5
summary(-0.5;1.5;2.5;1.5;-0.5;1.5)
sd(-0.5,1.5,2.5,1.5,-0.5,1.5)
sd
f(0.05,8,15)
qf(0.05,8,15)
qf(0.95,8,15)
qf(0.99,14,19)
qf(0.01,15,7)
aov.light
lm1
View(aov.light)
# Question 4
# Simulation 10000 days of total demand.
daily = function(sunny){
morning = rnorm(1,50,10)
ra = runif(1,60,80)
sa = runif(1,20,50)
p = runif(1)
if(p<sunny){
d = morning + sa
}
else{
d = morning + ra
}
return(d)
}
trialsNum = 10000
trialsOutcome = array(trialsNum)
for( i in 1:trialsNum){
trialsOutcome[i] = daily(0.4)
}
# histogram
hist(trialsOutcome,100)
# quantiles
quantile(trialsOutcome, probs = c(0.10, 0.90))
# Expected Daily Demand
AM = rnorm(1,50,10)
mean(AM)
# Expected Daily Demand
AM = rnorm(1000,50,10)
mean(AM)
50 + 0.6*(60+80)/2 + 0.4*(20+50)/2
106 * ($4 - $1) – (120 – 106) * $1
106 * (4 - 1) – (120 – 106) * 1
106 * (4 - 1) - (120 – 106) * 1
106 * (4 - 1) - (120 - 106) * 1
library(gurobi)
# create optimization problem
model <- list()
model$obj <- c(1, 1, 2)
model$modelsense <- "max"
model$rhs <- c(4, 1)
model$sense <- c("<", ">")
model$vtype <- "B"
model$A <- matrix(c(1, 2, 3, 1, 1, 0), nrow = 2, ncol = 3,
byrow = TRUE)
# solve the optimization problem using Gurobi
result <- gurobi(model, list())
setwd("~/Desktop/Columbia/Fall 2020/IEOR 4525 Machine Learning/Assignments/Assignment 1/Data")
library(MASS)
library(ISLR)
fix(Boston)
Boston
names(Boston)
lm.fit = lm(medv~lstat, data = Boston)
summary(lm.fit)
attach(Boston)
medv
poly(lstat,5)
lstat
poly(4.98,5)
poly(1:10,3)
